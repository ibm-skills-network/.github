on:
  workflow_call:
    inputs:
      image:
        description: 'Full docker image location. e.g. us.icr.io/skills-network-portals/curator'
        required: true
        type: string
      init_script:
        description: 'Provide path to a script to run before this workflow.'
        required: false
        type: string
      docker_target:
        description: 'Build target for multi-stage docker build'
        default: 'monkey-patched'
        required: false
        type: string
      docker_context:
        description: 'Build context directory'
        default: '.'
        required: false
        type: string
      docker_file:
        description: 'Path to the Dockerfile'
        default: ''
        required: false
        type: string
      docker_secrets:
        description: 'List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)'
        required: false
        type: string
      push:
        description: 'Should the docker image be pushed to ICR'
        default: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/') }}
        required: false
        type: boolean
    secrets:
      ICR_USERNAME:
        required: true
      ICR_PASSWORD:
        required: true
      NPM_TOKEN:
        required: true
      OBAN_KEY_FINGERPRINT:
        required: false
      OBAN_LICENSE_KEY:
        required: false

jobs:
  build:
    name: docker image
    runs-on: ubuntu-latest
    steps:
      - name: Initial Script
        run: ${{ inputs.init_script }}
        if: ${{ inputs.init_script }}
      - name: Get latest release tag
        id: latest-release
        uses: fangqiuming/latest-release-version@v1.1.1
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
        if: ${{ github.event_name == 'schedule' }}

        # base release is the release without any security patch suffix
        # base release of x.y.z is x.y.z
        # base release is x.y.z-YYYYMMDD is x.y.z
      - name: Get base release tag
        id: base-release
        run:  |
          echo "::set-output name=base-release::$(echo '${{ steps.latest-release.outputs.tag_name }}' | sed -r 's/(-[0-9]{8})$//')"
      - name: print release tag
        run: |
          echo "${{ steps.base-release.outputs.base-release }}"
        if: ${{ github.event_name == 'schedule' }}

      # If this is a scheduled (nightly) build use latest release tag
      # Otherwise use referenced/default branch/tag
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.latest-release.outputs.latest-release }}
        if: ${{ github.event_name == 'schedule' }}
      - uses: actions/checkout@v3
        if: ${{ github.event_name != 'schedule' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to US ICR
        uses: docker/login-action@v1
        with:
          registry: us.icr.io
          # These are organization-wide secrets,
          # so you don't need to configure them on your own
          username: ${{ secrets.ICR_USERNAME }}
          password: ${{ secrets.ICR_PASSWORD }}
      - name: Login to Global ICR
        uses: docker/login-action@v1
        with:
          registry: icr.io
          # These are organization-wide secrets,
          # so you don't need to configure them on your own
          username: ${{ secrets.ICR_USERNAME }}
          password: ${{ secrets.ICR_PASSWORD }}
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ inputs.image }}
          # Info: https://github.com/docker/metadata-action#tags-input
          #   - Tag for semantically versioned releases
          #   - Nightly tag ('<latest tag>-YYYYMMDD')
          #   - Manual tag (trigger from Github UI)
          tags: |
            type=semver,pattern={{version}}
            type=schedule,pattern=${{ steps.base-release.outputs.base-release }}-{{date 'YYYYMMDD'}}
            type=raw,value=manual,suffix=${{ github.event.inputs.suffix }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Setup npm registries
        run:  |
          echo "@ibm-skills-network:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc

      - name: Should we cache
        id: should-cache
        run:  |
          if [[ $(date +%a) == 'Sun' ]]; then
            echo "::set-output name=cache-from::"
            echo "::set-output name=cache-to::"
          else
            # disable caching on all days until we confirm our "Requires Manual Intervention"
            # issues aren't due to caching issues
            echo "::set-output name=cache-from::"
            echo "::set-output name=cache-to::"
            # echo "::set-output name=cache-from::type=gha"
            # echo "::set-output name=cache-to::type=gha,mode=max"
          fi

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          # If your Dockerfile is not present in the root directory
          # change it to the correct subdirectory name
          context: ${{ inputs.docker_context }}
          file: ${{ inputs.docker_file }}
          target: ${{ inputs.docker_target }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ steps.should-cache.outputs.cache-from }}
          cache-to: ${{ steps.should-cache.outputs.cache-to }}
          secrets: |
            "oban_key_fingerprint=${{ secrets.OBAN_KEY_FINGERPRINT }}"
            "oban_license_key=${{ secrets.OBAN_LICENSE_KEY }}"
            ${{ inputs.docker_secrets }}
